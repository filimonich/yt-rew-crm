{"version":3,"file":"vee-validate.esm-Bm2eTJGs.js","sources":["../../../../node_modules/.pnpm/vee-validate@4.12.6_vue@3.4.21/node_modules/vee-validate/dist/vee-validate.esm.js"],"sourcesContent":["/**\n  * vee-validate v4.12.6\n  * (c) 2024 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, computed, toValue, ref, watch, nextTick, unref, isRef, reactive, onUnmounted, onMounted, provide, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, readonly, watchEffect, shallowRef } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\n    return typeof fn === 'function';\n}\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n    return Number(value) >= 0;\n}\nfunction toNumber(value) {\n    const n = parseFloat(value);\n    return isNaN(n) ? value : n;\n}\nfunction isObjectLike(value) {\n    return typeof value === 'object' && value !== null;\n}\nfunction getTag(value) {\n    if (value == null) {\n        return value === undefined ? '[object Undefined]' : '[object Null]';\n    }\n    return Object.prototype.toString.call(value);\n}\n// Reference: https://github.com/lodash/lodash/blob/master/isPlainObject.js\nfunction isPlainObject(value) {\n    if (!isObjectLike(value) || getTag(value) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(value) === null) {\n        return true;\n    }\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n}\nfunction merge(target, source) {\n    Object.keys(source).forEach(key => {\n        if (isPlainObject(source[key]) && isPlainObject(target[key])) {\n            if (!target[key]) {\n                target[key] = {};\n            }\n            merge(target[key], source[key]);\n            return;\n        }\n        target[key] = source[key];\n    });\n    return target;\n}\n/**\n * Constructs a path with dot paths for arrays to use brackets to be compatible with vee-validate path syntax\n */\nfunction normalizeFormPath(path) {\n    const pathArr = path.split('.');\n    if (!pathArr.length) {\n        return '';\n    }\n    let fullPath = String(pathArr[0]);\n    for (let i = 1; i < pathArr.length; i++) {\n        if (isIndex(pathArr[i])) {\n            fullPath += `[${pathArr[i]}]`;\n            continue;\n        }\n        fullPath += `.${pathArr[i]}`;\n    }\n    return fullPath;\n}\n\nconst RULES = {};\n/**\n * Adds a custom validator to the list of validation rules.\n */\nfunction defineRule(id, validator) {\n    // makes sure new rules are properly formatted.\n    guardExtend(id, validator);\n    RULES[id] = validator;\n}\n/**\n * Gets an already defined rule\n */\nfunction resolveRule(id) {\n    return RULES[id];\n}\n/**\n * Guards from extension violations.\n */\nfunction guardExtend(id, validator) {\n    if (isCallable(validator)) {\n        return;\n    }\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\n\nconst isClient = typeof window !== 'undefined';\nfunction isLocator(value) {\n    return isCallable(value) && !!value.__locatorRef;\n}\nfunction isTypedSchema(value) {\n    return !!value && isCallable(value.parse) && value.__type === 'VVTypedSchema';\n}\nfunction isYupValidator(value) {\n    return !!value && isCallable(value.validate);\n}\nfunction hasCheckedAttr(type) {\n    return type === 'checkbox' || type === 'radio';\n}\nfunction isContainerValue(value) {\n    return isObject(value) || Array.isArray(value);\n}\n/**\n * True if the value is an empty object or array\n */\nfunction isEmptyContainer(value) {\n    if (Array.isArray(value)) {\n        return value.length === 0;\n    }\n    return isObject(value) && Object.keys(value).length === 0;\n}\n/**\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\n */\nfunction isNotNestedPath(path) {\n    return /^\\[.+\\]$/i.test(path);\n}\n/**\n * Checks if an element is a native HTML5 multi-select input element\n */\nfunction isNativeMultiSelect(el) {\n    return isNativeSelect(el) && el.multiple;\n}\n/**\n * Checks if an element is a native HTML5 select input element\n */\nfunction isNativeSelect(el) {\n    return el.tagName === 'SELECT';\n}\n/**\n * Checks if a tag name with attrs object will render a native multi-select element\n */\nfunction isNativeMultiSelectNode(tag, attrs) {\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\n * Checks if a node should have a `:value` binding or not\n *\n * These nodes should not have a value binding\n * For files, because they are not reactive\n * For multi-selects because the value binding will reset the value\n */\nfunction shouldHaveValueBinding(tag, attrs) {\n    return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\nfunction isFormSubmitEvent(evt) {\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\nfunction isEvent(evt) {\n    if (!evt) {\n        return false;\n    }\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n        return true;\n    }\n    // this is for IE and Cypress #3161\n    /* istanbul ignore next */\n    if (evt && evt.srcElement) {\n        return true;\n    }\n    return false;\n}\nfunction isPropPresent(obj, prop) {\n    return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\n * Compares if two values are the same borrowed from:\n * https://github.com/epoberezkin/fast-deep-equal\n * We added a case for file matching since `Object.keys` doesn't work with Files.\n * */\nfunction isEqual(a, b) {\n    if (a === b)\n        return true;\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\n        if (a.constructor !== b.constructor)\n            return false;\n        // eslint-disable-next-line no-var\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (!isEqual(a[i], b[i]))\n                    return false;\n            return true;\n        }\n        if (a instanceof Map && b instanceof Map) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            for (i of a.entries())\n                if (!isEqual(i[1], b.get(i[0])))\n                    return false;\n            return true;\n        }\n        // We added this part for file comparison, arguably a little naive but should work for most cases.\n        // #3911\n        if (isFile(a) && isFile(b)) {\n            if (a.size !== b.size)\n                return false;\n            if (a.name !== b.name)\n                return false;\n            if (a.lastModified !== b.lastModified)\n                return false;\n            if (a.type !== b.type)\n                return false;\n            return true;\n        }\n        if (a instanceof Set && b instanceof Set) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            return true;\n        }\n        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (a[i] !== b[i])\n                    return false;\n            return true;\n        }\n        if (a.constructor === RegExp)\n            return a.source === b.source && a.flags === b.flags;\n        if (a.valueOf !== Object.prototype.valueOf)\n            return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString)\n            return a.toString() === b.toString();\n        keys = Object.keys(a);\n        length = keys.length;\n        for (i = length; i-- !== 0;) {\n            // eslint-disable-next-line no-var\n            var key = keys[i];\n            if (!isEqual(a[key], b[key]))\n                return false;\n        }\n        return true;\n    }\n    // true if both NaN, false otherwise\n    // eslint-disable-next-line no-self-compare\n    return a !== a && b !== b;\n}\nfunction isFile(a) {\n    if (!isClient) {\n        return false;\n    }\n    return a instanceof File;\n}\n\nfunction cleanupNonNestedPath(path) {\n    if (isNotNestedPath(path)) {\n        return path.replace(/\\[|\\]/gi, '');\n    }\n    return path;\n}\nfunction getFromPath(object, path, fallback) {\n    if (!object) {\n        return fallback;\n    }\n    if (isNotNestedPath(path)) {\n        return object[cleanupNonNestedPath(path)];\n    }\n    const resolvedValue = (path || '')\n        .split(/\\.|\\[(\\d+)\\]/)\n        .filter(Boolean)\n        .reduce((acc, propKey) => {\n        if (isContainerValue(acc) && propKey in acc) {\n            return acc[propKey];\n        }\n        return fallback;\n    }, object);\n    return resolvedValue;\n}\n/**\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\n */\nfunction setInPath(object, path, value) {\n    if (isNotNestedPath(path)) {\n        object[cleanupNonNestedPath(path)] = value;\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, set it\n        if (i === keys.length - 1) {\n            acc[keys[i]] = value;\n            return;\n        }\n        // Key does not exist, create a container for it\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            // container can be either an object or an array depending on the next key if it exists\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n        }\n        acc = acc[keys[i]];\n    }\n}\nfunction unset(object, key) {\n    if (Array.isArray(object) && isIndex(key)) {\n        object.splice(Number(key), 1);\n        return;\n    }\n    if (isObject(object)) {\n        delete object[key];\n    }\n}\n/**\n * Removes a nested property from object\n */\nfunction unsetPath(object, path) {\n    if (isNotNestedPath(path)) {\n        delete object[cleanupNonNestedPath(path)];\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, unset it\n        if (i === keys.length - 1) {\n            unset(acc, keys[i]);\n            break;\n        }\n        // Key does not exist, exit\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            break;\n        }\n        acc = acc[keys[i]];\n    }\n    const pathValues = keys.map((_, idx) => {\n        return getFromPath(object, keys.slice(0, idx).join('.'));\n    });\n    for (let i = pathValues.length - 1; i >= 0; i--) {\n        if (!isEmptyContainer(pathValues[i])) {\n            continue;\n        }\n        if (i === 0) {\n            unset(object, keys[0]);\n            continue;\n        }\n        unset(pathValues[i - 1], keys[i - 1]);\n    }\n}\n/**\n * A typed version of Object.keys\n */\nfunction keysOf(record) {\n    return Object.keys(record);\n}\n// Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\nfunction injectWithSelf(symbol, def = undefined) {\n    const vm = getCurrentInstance();\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\nfunction warn(message) {\n    warn$1(`[vee-validate]: ${message}`);\n}\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n    if (Array.isArray(currentValue)) {\n        const newVal = [...currentValue];\n        // Use isEqual since checked object values can possibly fail the equality check #3883\n        const idx = newVal.findIndex(v => isEqual(v, checkedValue));\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n        return newVal;\n    }\n    return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\n * (`limit`)\n */\nfunction throttle(func, limit) {\n    let inThrottle;\n    let lastResult;\n    return function (...args) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const context = this;\n        if (!inThrottle) {\n            inThrottle = true;\n            setTimeout(() => (inThrottle = false), limit);\n            lastResult = func.apply(context, args);\n        }\n        return lastResult;\n    };\n}\nfunction debounceAsync(inner, ms = 0) {\n    let timer = null;\n    let resolves = [];\n    return function (...args) {\n        // Run the function after a certain amount of time\n        if (timer) {\n            clearTimeout(timer);\n        }\n        // @ts-expect-error timer is a number\n        timer = setTimeout(() => {\n            // Get the result of the inner function, then apply it to the resolve function of\n            // each promise that has been created since the last time the inner function was run\n            const result = inner(...args);\n            resolves.forEach(r => r(result));\n            resolves = [];\n        }, ms);\n        return new Promise(resolve => resolves.push(resolve));\n    };\n}\nfunction applyModelModifiers(value, modifiers) {\n    if (!isObject(modifiers)) {\n        return value;\n    }\n    if (modifiers.number) {\n        return toNumber(value);\n    }\n    return value;\n}\nfunction withLatest(fn, onDone) {\n    let latestRun;\n    return async function runLatest(...args) {\n        const pending = fn(...args);\n        latestRun = pending;\n        const result = await pending;\n        if (pending !== latestRun) {\n            return result;\n        }\n        latestRun = undefined;\n        return onDone(result, args);\n    };\n}\nfunction computedDeep({ get, set }) {\n    const baseRef = ref(klona(get()));\n    watch(get, newValue => {\n        if (isEqual(newValue, baseRef.value)) {\n            return;\n        }\n        baseRef.value = klona(newValue);\n    }, {\n        deep: true,\n    });\n    watch(baseRef, newValue => {\n        if (isEqual(newValue, get())) {\n            return;\n        }\n        set(klona(newValue));\n    }, {\n        deep: true,\n    });\n    return baseRef;\n}\nfunction normalizeErrorItem(message) {\n    return Array.isArray(message) ? message : message ? [message] : [];\n}\nfunction resolveFieldOrPathState(path) {\n    const form = injectWithSelf(FormContextKey);\n    const state = path ? computed(() => form === null || form === void 0 ? void 0 : form.getPathState(toValue(path))) : undefined;\n    const field = path ? undefined : inject(FieldContextKey);\n    if (!field && !(state === null || state === void 0 ? void 0 : state.value)) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`field with name ${toValue(path)} was not found`);\n        }\n    }\n    return state || field;\n}\nfunction omit(obj, keys) {\n    const target = {};\n    for (const key in obj) {\n        if (!keys.includes(key)) {\n            target[key] = obj[key];\n        }\n    }\n    return target;\n}\nfunction debounceNextTick(inner) {\n    let lastTick = null;\n    let resolves = [];\n    return function (...args) {\n        // Run the function after a certain amount of time\n        const thisTick = nextTick(() => {\n            if (lastTick !== thisTick) {\n                return;\n            }\n            // Get the result of the inner function, then apply it to the resolve function of\n            // each promise that has been created since the last time the inner function was run\n            const result = inner(...args);\n            resolves.forEach(r => r(result));\n            resolves = [];\n            lastTick = null;\n        });\n        lastTick = thisTick;\n        return new Promise(resolve => resolves.push(resolve));\n    };\n}\n\nfunction normalizeChildren(tag, context, slotProps) {\n    if (!context.slots.default) {\n        return context.slots.default;\n    }\n    if (typeof tag === 'string' || !tag) {\n        return context.slots.default(slotProps());\n    }\n    return {\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\n    };\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction getBoundValue(el) {\n    if (hasValueBinding(el)) {\n        return el._value;\n    }\n    return undefined;\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction hasValueBinding(el) {\n    return '_value' in el;\n}\n\nfunction parseInputValue(el) {\n    if (el.type === 'number') {\n        return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n    }\n    if (el.type === 'range') {\n        return Number.isNaN(el.valueAsNumber) ? el.value : el.valueAsNumber;\n    }\n    return el.value;\n}\nfunction normalizeEventValue(value) {\n    if (!isEvent(value)) {\n        return value;\n    }\n    const input = value.target;\n    // Vue sets the current bound value on `_value` prop\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n        return getBoundValue(input);\n    }\n    if (input.type === 'file' && input.files) {\n        const files = Array.from(input.files);\n        return input.multiple ? files : files[0];\n    }\n    if (isNativeMultiSelect(input)) {\n        return Array.from(input.options)\n            .filter(opt => opt.selected && !opt.disabled)\n            .map(getBoundValue);\n    }\n    // makes sure we get the actual `option` bound value\n    // #3440\n    if (isNativeSelect(input)) {\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\n    }\n    return parseInputValue(input);\n}\n\n/**\n * Normalizes the given rules expression.\n */\nfunction normalizeRules(rules) {\n    const acc = {};\n    Object.defineProperty(acc, '_$$isNormalized', {\n        value: true,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n    });\n    if (!rules) {\n        return acc;\n    }\n    // Object is already normalized, skip.\n    if (isObject(rules) && rules._$$isNormalized) {\n        return rules;\n    }\n    if (isObject(rules)) {\n        return Object.keys(rules).reduce((prev, curr) => {\n            const params = normalizeParams(rules[curr]);\n            if (rules[curr] !== false) {\n                prev[curr] = buildParams(params);\n            }\n            return prev;\n        }, acc);\n    }\n    /* istanbul ignore if */\n    if (typeof rules !== 'string') {\n        return acc;\n    }\n    return rules.split('|').reduce((prev, rule) => {\n        const parsedRule = parseRule(rule);\n        if (!parsedRule.name) {\n            return prev;\n        }\n        prev[parsedRule.name] = buildParams(parsedRule.params);\n        return prev;\n    }, acc);\n}\n/**\n * Normalizes a rule param.\n */\nfunction normalizeParams(params) {\n    if (params === true) {\n        return [];\n    }\n    if (Array.isArray(params)) {\n        return params;\n    }\n    if (isObject(params)) {\n        return params;\n    }\n    return [params];\n}\nfunction buildParams(provided) {\n    const mapValueToLocator = (value) => {\n        // A target param using interpolation\n        if (typeof value === 'string' && value[0] === '@') {\n            return createLocator(value.slice(1));\n        }\n        return value;\n    };\n    if (Array.isArray(provided)) {\n        return provided.map(mapValueToLocator);\n    }\n    // #3073\n    if (provided instanceof RegExp) {\n        return [provided];\n    }\n    return Object.keys(provided).reduce((prev, key) => {\n        prev[key] = mapValueToLocator(provided[key]);\n        return prev;\n    }, {});\n}\n/**\n * Parses a rule string expression.\n */\nconst parseRule = (rule) => {\n    let params = [];\n    const name = rule.split(':')[0];\n    if (rule.includes(':')) {\n        params = rule.split(':').slice(1).join(':').split(',');\n    }\n    return { name, params };\n};\nfunction createLocator(value) {\n    const locator = (crossTable) => {\n        const val = getFromPath(crossTable, value) || crossTable[value];\n        return val;\n    };\n    locator.__locatorRef = value;\n    return locator;\n}\nfunction extractLocators(params) {\n    if (Array.isArray(params)) {\n        return params.filter(isLocator);\n    }\n    return keysOf(params)\n        .filter(key => isLocator(params[key]))\n        .map(key => params[key]);\n}\n\nconst DEFAULT_CONFIG = {\n    generateMessage: ({ field }) => `${field} is not valid.`,\n    bails: true,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validateOnInput: false,\n    validateOnModelUpdate: true,\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\nconst getConfig = () => currentConfig;\nconst setConfig = (newConf) => {\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\nconst configure = setConfig;\n\n/**\n * Validates a value against the rules.\n */\nasync function validate(value, rules, options = {}) {\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n    const field = {\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n        rules,\n        label: options === null || options === void 0 ? void 0 : options.label,\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\n    };\n    const result = await _validate(field, value);\n    const errors = result.errors;\n    return {\n        errors,\n        valid: !errors.length,\n    };\n}\n/**\n * Starts the validation process.\n */\nasync function _validate(field, value) {\n    if (isTypedSchema(field.rules) || isYupValidator(field.rules)) {\n        return validateFieldWithTypedSchema(value, field.rules);\n    }\n    // if a generic function or chain of generic functions\n    if (isCallable(field.rules) || Array.isArray(field.rules)) {\n        const ctx = {\n            field: field.label || field.name,\n            name: field.name,\n            label: field.label,\n            form: field.formData,\n            value,\n        };\n        // Normalize the pipeline\n        const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n        const length = pipeline.length;\n        const errors = [];\n        for (let i = 0; i < length; i++) {\n            const rule = pipeline[i];\n            const result = await rule(value, ctx);\n            const isValid = typeof result !== 'string' && !Array.isArray(result) && result;\n            if (isValid) {\n                continue;\n            }\n            if (Array.isArray(result)) {\n                errors.push(...result);\n            }\n            else {\n                const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n                errors.push(message);\n            }\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n        return {\n            errors,\n        };\n    }\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\n    const errors = [];\n    const rulesKeys = Object.keys(normalizedContext.rules);\n    const length = rulesKeys.length;\n    for (let i = 0; i < length; i++) {\n        const rule = rulesKeys[i];\n        const result = await _test(normalizedContext, value, {\n            name: rule,\n            params: normalizedContext.rules[rule],\n        });\n        if (result.error) {\n            errors.push(result.error);\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n    }\n    return {\n        errors,\n    };\n}\nfunction isYupError(err) {\n    return !!err && err.name === 'ValidationError';\n}\nfunction yupToTypedSchema(yupSchema) {\n    const schema = {\n        __type: 'VVTypedSchema',\n        async parse(values) {\n            var _a;\n            try {\n                const output = await yupSchema.validate(values, { abortEarly: false });\n                return {\n                    output,\n                    errors: [],\n                };\n            }\n            catch (err) {\n                // Yup errors have a name prop one them.\n                // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n                if (!isYupError(err)) {\n                    throw err;\n                }\n                if (!((_a = err.inner) === null || _a === void 0 ? void 0 : _a.length) && err.errors.length) {\n                    return { errors: [{ path: err.path, errors: err.errors }] };\n                }\n                const errors = err.inner.reduce((acc, curr) => {\n                    const path = curr.path || '';\n                    if (!acc[path]) {\n                        acc[path] = { errors: [], path };\n                    }\n                    acc[path].errors.push(...curr.errors);\n                    return acc;\n                }, {});\n                return { errors: Object.values(errors) };\n            }\n        },\n    };\n    return schema;\n}\n/**\n * Handles yup validation\n */\nasync function validateFieldWithTypedSchema(value, schema) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const result = await typedSchema.parse(value);\n    const messages = [];\n    for (const error of result.errors) {\n        if (error.errors.length) {\n            messages.push(...error.errors);\n        }\n    }\n    return {\n        errors: messages,\n    };\n}\n/**\n * Tests a single input value against a rule.\n */\nasync function _test(field, value, rule) {\n    const validator = resolveRule(rule.name);\n    if (!validator) {\n        throw new Error(`No such validator '${rule.name}' exists.`);\n    }\n    const params = fillTargetValues(rule.params, field.formData);\n    const ctx = {\n        field: field.label || field.name,\n        name: field.name,\n        label: field.label,\n        value,\n        form: field.formData,\n        rule: Object.assign(Object.assign({}, rule), { params }),\n    };\n    const result = await validator(value, params, ctx);\n    if (typeof result === 'string') {\n        return {\n            error: result,\n        };\n    }\n    return {\n        error: result ? undefined : _generateFieldError(ctx),\n    };\n}\n/**\n * Generates error messages.\n */\nfunction _generateFieldError(fieldCtx) {\n    const message = getConfig().generateMessage;\n    if (!message) {\n        return 'Field is invalid';\n    }\n    return message(fieldCtx);\n}\nfunction fillTargetValues(params, crossTable) {\n    const normalize = (value) => {\n        if (isLocator(value)) {\n            return value(crossTable);\n        }\n        return value;\n    };\n    if (Array.isArray(params)) {\n        return params.map(normalize);\n    }\n    return Object.keys(params).reduce((acc, param) => {\n        acc[param] = normalize(params[param]);\n        return acc;\n    }, {});\n}\nasync function validateTypedSchema(schema, values) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const validationResult = await typedSchema.parse(klona(values));\n    const results = {};\n    const errors = {};\n    for (const error of validationResult.errors) {\n        const messages = error.errors;\n        // Fixes issue with path mapping with Yup 1.0 including quotes around array indices\n        const path = (error.path || '').replace(/\\[\"(\\d+)\"\\]/g, (_, m) => {\n            return `[${m}]`;\n        });\n        results[path] = { valid: !messages.length, errors: messages };\n        if (messages.length) {\n            errors[path] = messages[0];\n        }\n    }\n    return {\n        valid: !validationResult.errors.length,\n        results,\n        errors,\n        values: validationResult.value,\n    };\n}\nasync function validateObjectSchema(schema, values, opts) {\n    const paths = keysOf(schema);\n    const validations = paths.map(async (path) => {\n        var _a, _b, _c;\n        const strings = (_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path];\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\n            name: (strings === null || strings === void 0 ? void 0 : strings.name) || path,\n            label: strings === null || strings === void 0 ? void 0 : strings.label,\n            values: values,\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\n        });\n        return Object.assign(Object.assign({}, fieldResult), { path });\n    });\n    let isAllValid = true;\n    const validationResults = await Promise.all(validations);\n    const results = {};\n    const errors = {};\n    for (const result of validationResults) {\n        results[result.path] = {\n            valid: result.valid,\n            errors: result.errors,\n        };\n        if (!result.valid) {\n            isAllValid = false;\n            errors[result.path] = result.errors[0];\n        }\n    }\n    return {\n        valid: isAllValid,\n        results,\n        errors,\n    };\n}\n\nlet ID_COUNTER = 0;\nfunction useFieldState(path, init) {\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, init.form);\n    if (!init.form) {\n        const { errors, setErrors } = createFieldErrors();\n        const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n        const meta = createFieldMeta(value, initialValue, errors, init.schema);\n        function setState(state) {\n            var _a;\n            if ('value' in state) {\n                value.value = state.value;\n            }\n            if ('errors' in state) {\n                setErrors(state.errors);\n            }\n            if ('touched' in state) {\n                meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n            }\n            if ('initialValue' in state) {\n                setInitialValue(state.initialValue);\n            }\n        }\n        return {\n            id,\n            path,\n            value,\n            initialValue,\n            meta,\n            flags: { pendingUnmount: { [id]: false }, pendingReset: false },\n            errors,\n            setState,\n        };\n    }\n    const state = init.form.createPathState(path, {\n        bails: init.bails,\n        label: init.label,\n        type: init.type,\n        validate: init.validate,\n        schema: init.schema,\n    });\n    const errors = computed(() => state.errors);\n    function setState(state) {\n        var _a, _b, _c;\n        if ('value' in state) {\n            value.value = state.value;\n        }\n        if ('errors' in state) {\n            (_a = init.form) === null || _a === void 0 ? void 0 : _a.setFieldError(unref(path), state.errors);\n        }\n        if ('touched' in state) {\n            (_b = init.form) === null || _b === void 0 ? void 0 : _b.setFieldTouched(unref(path), (_c = state.touched) !== null && _c !== void 0 ? _c : false);\n        }\n        if ('initialValue' in state) {\n            setInitialValue(state.initialValue);\n        }\n    }\n    return {\n        id: Array.isArray(state.id) ? state.id[state.id.length - 1] : state.id,\n        path,\n        value,\n        errors,\n        meta: state,\n        initialValue,\n        flags: state.__flags,\n        setState,\n    };\n}\n/**\n * Creates the field value and resolves the initial value\n */\nfunction _useFieldValue(path, modelValue, form) {\n    const modelRef = ref(unref(modelValue));\n    function resolveInitialValue() {\n        if (!form) {\n            return unref(modelRef);\n        }\n        return getFromPath(form.initialValues.value, unref(path), unref(modelRef));\n    }\n    function setInitialValue(value) {\n        if (!form) {\n            modelRef.value = value;\n            return;\n        }\n        form.setFieldInitialValue(unref(path), value, true);\n    }\n    const initialValue = computed(resolveInitialValue);\n    // if no form is associated, use a regular ref.\n    if (!form) {\n        const value = ref(resolveInitialValue());\n        return {\n            value,\n            initialValue,\n            setInitialValue,\n        };\n    }\n    // to set the initial value, first check if there is a current value, if there is then use it.\n    // otherwise use the configured initial value if it exists.\n    // prioritize model value over form values\n    // #3429\n    const currentValue = resolveModelValue(modelValue, form, initialValue, path);\n    form.stageInitialValue(unref(path), currentValue, true);\n    // otherwise use a computed setter that triggers the `setFieldValue`\n    const value = computed({\n        get() {\n            return getFromPath(form.values, unref(path));\n        },\n        set(newVal) {\n            form.setFieldValue(unref(path), newVal, false);\n        },\n    });\n    return {\n        value,\n        initialValue,\n        setInitialValue,\n    };\n}\n/*\n  to set the initial value, first check if there is a current value, if there is then use it.\n  otherwise use the configured initial value if it exists.\n  prioritize model value over form values\n  #3429\n*/\nfunction resolveModelValue(modelValue, form, initialValue, path) {\n    if (isRef(modelValue)) {\n        return unref(modelValue);\n    }\n    if (modelValue !== undefined) {\n        return modelValue;\n    }\n    return getFromPath(form.values, unref(path), unref(initialValue));\n}\n/**\n * Creates meta flags state and some associated effects with them\n */\nfunction createFieldMeta(currentValue, initialValue, errors, schema) {\n    var _a, _b;\n    const isRequired = (_b = (_a = schema === null || schema === void 0 ? void 0 : schema.describe) === null || _a === void 0 ? void 0 : _a.call(schema).required) !== null && _b !== void 0 ? _b : false;\n    const meta = reactive({\n        touched: false,\n        pending: false,\n        valid: true,\n        required: isRequired,\n        validated: !!unref(errors).length,\n        initialValue: computed(() => unref(initialValue)),\n        dirty: computed(() => {\n            return !isEqual(unref(currentValue), unref(initialValue));\n        }),\n    });\n    watch(errors, value => {\n        meta.valid = !value.length;\n    }, {\n        immediate: true,\n        flush: 'sync',\n    });\n    return meta;\n}\n/**\n * Creates the error message state for the field state\n */\nfunction createFieldErrors() {\n    const errors = ref([]);\n    return {\n        errors,\n        setErrors: (messages) => {\n            errors.value = normalizeErrorItem(messages);\n        },\n    };\n}\n\nfunction installDevtoolsPlugin(app) {\n    if ((process.env.NODE_ENV !== 'production')) {\n        setupDevtoolsPlugin({\n            id: 'vee-validate-devtools-plugin',\n            label: 'VeeValidate Plugin',\n            packageName: 'vee-validate',\n            homepage: 'https://vee-validate.logaretm.com/v4',\n            app,\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\n        }, setupApiHooks);\n    }\n}\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n    setTimeout(async () => {\n        await nextTick();\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n    }, 100);\n}, 100);\nfunction registerFormWithDevTools(form) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FORMS[form.formId];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nfunction registerSingleFieldWithDevtools(field) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FIELDS[field.id];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n    error: 0xbd4b4b,\n    success: 0x06d77b,\n    unknown: 0x54436b,\n    white: 0xffffff,\n    black: 0x000000,\n    blue: 0x035397,\n    purple: 0xb980f0,\n    orange: 0xf5a962,\n    gray: 0xbbbfca,\n};\nlet SELECTED_NODE = null;\nfunction setupApiHooks(api) {\n    API = api;\n    api.addInspector({\n        id: INSPECTOR_ID,\n        icon: 'rule',\n        label: 'vee-validate',\n        noSelectionText: 'Select a vee-validate node to inspect',\n        actions: [\n            {\n                icon: 'done_outline',\n                tooltip: 'Validate selected item',\n                action: async () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'field') {\n                        await SELECTED_NODE.field.validate();\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'form') {\n                        await SELECTED_NODE.form.validate();\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'pathState') {\n                        await SELECTED_NODE.form.validateField(SELECTED_NODE.state.path);\n                    }\n                },\n            },\n            {\n                icon: 'delete_sweep',\n                tooltip: 'Clear validation state of the selected item',\n                action: () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'field') {\n                        SELECTED_NODE.field.resetField();\n                        return;\n                    }\n                    if (SELECTED_NODE.type === 'form') {\n                        SELECTED_NODE.form.resetForm();\n                    }\n                    if (SELECTED_NODE.type === 'pathState') {\n                        SELECTED_NODE.form.resetField(SELECTED_NODE.state.path);\n                    }\n                },\n            },\n        ],\n    });\n    api.on.getInspectorTree(payload => {\n        if (payload.inspectorId !== INSPECTOR_ID) {\n            return;\n        }\n        const forms = Object.values(DEVTOOLS_FORMS);\n        const fields = Object.values(DEVTOOLS_FIELDS);\n        payload.rootNodes = [\n            ...forms.map(mapFormForDevtoolsInspector),\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\n        ];\n    });\n    api.on.getInspectorState((payload, ctx) => {\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n            return;\n        }\n        const { form, field, state, type } = decodeNodeId(payload.nodeId);\n        if (form && type === 'form') {\n            payload.state = buildFormState(form);\n            SELECTED_NODE = { type: 'form', form };\n            return;\n        }\n        if (state && type === 'pathState' && form) {\n            payload.state = buildFieldState(state);\n            SELECTED_NODE = { type: 'pathState', state, form };\n            return;\n        }\n        if (field && type === 'field') {\n            payload.state = buildFieldState({\n                errors: field.errors.value,\n                dirty: field.meta.dirty,\n                valid: field.meta.valid,\n                touched: field.meta.touched,\n                value: field.value.value,\n                initialValue: field.meta.initialValue,\n            });\n            SELECTED_NODE = { field, type: 'field' };\n            return;\n        }\n        SELECTED_NODE = null;\n    });\n}\nfunction mapFormForDevtoolsInspector(form) {\n    const { textColor, bgColor } = getValidityColors(form.meta.value.valid);\n    const formTreeNodes = {};\n    Object.values(form.getAllPathStates()).forEach(state => {\n        setInPath(formTreeNodes, unref(state.path), mapPathForDevtoolsInspector(state, form));\n    });\n    function buildFormTree(tree, path = []) {\n        const key = [...path].pop();\n        if ('id' in tree) {\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\n        }\n        if (isObject(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: key || '',\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\n            };\n        }\n        if (Array.isArray(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: `${key}[]`,\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\n            };\n        }\n        return { id: '', label: '', children: [] };\n    }\n    const { children } = buildFormTree(formTreeNodes);\n    return {\n        id: encodeNodeId(form),\n        label: 'Form',\n        children,\n        tags: [\n            {\n                label: 'Form',\n                textColor,\n                backgroundColor: bgColor,\n            },\n            {\n                label: `${form.getAllPathStates().length} fields`,\n                textColor: COLORS.white,\n                backgroundColor: COLORS.unknown,\n            },\n        ],\n    };\n}\nfunction mapPathForDevtoolsInspector(state, form) {\n    return {\n        id: encodeNodeId(form, state),\n        label: unref(state.path),\n        tags: getFieldNodeTags(state.multiple, state.fieldsCount, state.type, state.valid, form),\n    };\n}\nfunction mapFieldForDevtoolsInspector(field, form) {\n    return {\n        id: encodeNodeId(form, field),\n        label: unref(field.name),\n        tags: getFieldNodeTags(false, 1, field.type, field.meta.valid, form),\n    };\n}\nfunction getFieldNodeTags(multiple, fieldsCount, type, valid, form) {\n    const { textColor, bgColor } = getValidityColors(valid);\n    return [\n        multiple\n            ? undefined\n            : {\n                label: 'Field',\n                textColor,\n                backgroundColor: bgColor,\n            },\n        !form\n            ? {\n                label: 'Standalone',\n                textColor: COLORS.black,\n                backgroundColor: COLORS.gray,\n            }\n            : undefined,\n        type === 'checkbox'\n            ? {\n                label: 'Checkbox',\n                textColor: COLORS.white,\n                backgroundColor: COLORS.blue,\n            }\n            : undefined,\n        type === 'radio'\n            ? {\n                label: 'Radio',\n                textColor: COLORS.white,\n                backgroundColor: COLORS.purple,\n            }\n            : undefined,\n        multiple\n            ? {\n                label: 'Multiple',\n                textColor: COLORS.black,\n                backgroundColor: COLORS.orange,\n            }\n            : undefined,\n    ].filter(Boolean);\n}\nfunction encodeNodeId(form, stateOrField) {\n    const type = stateOrField ? ('path' in stateOrField ? 'pathState' : 'field') : 'form';\n    const fieldPath = stateOrField ? ('path' in stateOrField ? stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.path : unref(stateOrField === null || stateOrField === void 0 ? void 0 : stateOrField.name)) : '';\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, type };\n    return btoa(encodeURIComponent(JSON.stringify(idObject)));\n}\nfunction decodeNodeId(nodeId) {\n    try {\n        const idObject = JSON.parse(decodeURIComponent(atob(nodeId)));\n        const form = DEVTOOLS_FORMS[idObject.f];\n        if (!form && idObject.ff) {\n            const field = DEVTOOLS_FIELDS[idObject.ff];\n            if (!field) {\n                return {};\n            }\n            return {\n                type: idObject.type,\n                field,\n            };\n        }\n        if (!form) {\n            return {};\n        }\n        const state = form.getPathState(idObject.ff);\n        return {\n            type: idObject.type,\n            form,\n            state,\n        };\n    }\n    catch (err) {\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n    }\n    return {};\n}\nfunction buildFieldState(state) {\n    return {\n        'Field state': [\n            { key: 'errors', value: state.errors },\n            {\n                key: 'initialValue',\n                value: state.initialValue,\n            },\n            {\n                key: 'currentValue',\n                value: state.value,\n            },\n            {\n                key: 'touched',\n                value: state.touched,\n            },\n            {\n                key: 'dirty',\n                value: state.dirty,\n            },\n            {\n                key: 'valid',\n                value: state.valid,\n            },\n        ],\n    };\n}\nfunction buildFormState(form) {\n    const { errorBag, meta, values, isSubmitting, isValidating, submitCount } = form;\n    return {\n        'Form state': [\n            {\n                key: 'submitCount',\n                value: submitCount.value,\n            },\n            {\n                key: 'isSubmitting',\n                value: isSubmitting.value,\n            },\n            {\n                key: 'isValidating',\n                value: isValidating.value,\n            },\n            {\n                key: 'touched',\n                value: meta.value.touched,\n            },\n            {\n                key: 'dirty',\n                value: meta.value.dirty,\n            },\n            {\n                key: 'valid',\n                value: meta.value.valid,\n            },\n            {\n                key: 'initialValues',\n                value: meta.value.initialValues,\n            },\n            {\n                key: 'currentValues',\n                value: values,\n            },\n            {\n                key: 'errors',\n                value: keysOf(errorBag.value).reduce((acc, key) => {\n                    var _a;\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n                    if (message) {\n                        acc[key] = message;\n                    }\n                    return acc;\n                }, {}),\n            },\n        ],\n    };\n}\n/**\n * Resolves the tag color based on the form state\n */\nfunction getValidityColors(valid) {\n    return {\n        bgColor: valid ? COLORS.success : COLORS.error,\n        textColor: valid ? COLORS.black : COLORS.white,\n    };\n}\n\n/**\n * Creates a field composite.\n */\nfunction useField(path, rules, opts) {\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n        return useFieldWithChecked(path, rules, opts);\n    }\n    return _useField(path, rules, opts);\n}\nfunction _useField(path, rules, opts) {\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, controlled, keepValueOnUnmount, syncVModel, form: controlForm, } = normalizeOptions(opts);\n    const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\n    const form = controlForm || injectedForm;\n    const name = computed(() => normalizeFormPath(toValue(path)));\n    const validator = computed(() => {\n        const schema = toValue(form === null || form === void 0 ? void 0 : form.schema);\n        if (schema) {\n            return undefined;\n        }\n        const rulesValue = unref(rules);\n        if (isYupValidator(rulesValue) ||\n            isTypedSchema(rulesValue) ||\n            isCallable(rulesValue) ||\n            Array.isArray(rulesValue)) {\n            return rulesValue;\n        }\n        return normalizeRules(rulesValue);\n    });\n    const { id, value, initialValue, meta, setState, errors, flags } = useFieldState(name, {\n        modelValue,\n        form,\n        bails,\n        label,\n        type,\n        validate: validator.value ? validate$1 : undefined,\n        schema: isTypedSchema(rules) ? rules : undefined,\n    });\n    const errorMessage = computed(() => errors.value[0]);\n    if (syncVModel) {\n        useVModel({\n            value,\n            prop: syncVModel,\n            handleChange,\n            shouldValidate: () => validateOnValueUpdate && !flags.pendingReset,\n        });\n    }\n    /**\n     * Handles common onBlur meta update\n     */\n    const handleBlur = (evt, shouldValidate = false) => {\n        meta.touched = true;\n        if (shouldValidate) {\n            validateWithStateMutation();\n        }\n    };\n    async function validateCurrentValue(mode) {\n        var _a, _b;\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n            const { results } = await form.validateSchema(mode);\n            return (_a = results[toValue(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\n        }\n        if (validator.value) {\n            return validate(value.value, validator.value, {\n                name: toValue(name),\n                label: toValue(label),\n                values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n                bails,\n            });\n        }\n        return { valid: true, errors: [] };\n    }\n    const validateWithStateMutation = withLatest(async () => {\n        meta.pending = true;\n        meta.validated = true;\n        return validateCurrentValue('validated-only');\n    }, result => {\n        if (flags.pendingUnmount[field.id]) {\n            return result;\n        }\n        setState({ errors: result.errors });\n        meta.pending = false;\n        meta.valid = result.valid;\n        return result;\n    });\n    const validateValidStateOnly = withLatest(async () => {\n        return validateCurrentValue('silent');\n    }, result => {\n        meta.valid = result.valid;\n        return result;\n    });\n    function validate$1(opts) {\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n            return validateValidStateOnly();\n        }\n        return validateWithStateMutation();\n    }\n    // Common input/change event handler\n    function handleChange(e, shouldValidate = true) {\n        const newValue = normalizeEventValue(e);\n        setValue(newValue, shouldValidate);\n    }\n    // Runs the initial validation\n    onMounted(() => {\n        if (validateOnMount) {\n            return validateWithStateMutation();\n        }\n        // validate self initially if no form was handling this\n        // forms should have their own initial silent validation run to make things more efficient\n        if (!form || !form.validateSchema) {\n            validateValidStateOnly();\n        }\n    });\n    function setTouched(isTouched) {\n        meta.touched = isTouched;\n    }\n    function resetField(state) {\n        var _a;\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\n        setState({\n            value: klona(newValue),\n            initialValue: klona(newValue),\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\n        });\n        meta.pending = false;\n        meta.validated = false;\n        validateValidStateOnly();\n    }\n    const vm = getCurrentInstance();\n    function setValue(newValue, shouldValidate = true) {\n        value.value = vm && syncVModel ? applyModelModifiers(newValue, vm.props.modelModifiers) : newValue;\n        const validateFn = shouldValidate ? validateWithStateMutation : validateValidStateOnly;\n        validateFn();\n    }\n    function setErrors(errors) {\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\n    }\n    const valueProxy = computed({\n        get() {\n            return value.value;\n        },\n        set(newValue) {\n            setValue(newValue, validateOnValueUpdate);\n        },\n    });\n    const field = {\n        id,\n        name,\n        label,\n        value: valueProxy,\n        meta,\n        errors,\n        errorMessage,\n        type,\n        checkedValue,\n        uncheckedValue,\n        bails,\n        keepValueOnUnmount,\n        resetField,\n        handleReset: () => resetField(),\n        validate: validate$1,\n        handleChange,\n        handleBlur,\n        setState,\n        setTouched,\n        setErrors,\n        setValue,\n    };\n    provide(FieldContextKey, field);\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\n        watch(rules, (value, oldValue) => {\n            if (isEqual(value, oldValue)) {\n                return;\n            }\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }, {\n            deep: true,\n        });\n    }\n    if ((process.env.NODE_ENV !== 'production')) {\n        field._vm = getCurrentInstance();\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\n            deep: true,\n        });\n        if (!form) {\n            registerSingleFieldWithDevtools(field);\n        }\n    }\n    // if no associated form return the field API immediately\n    if (!form) {\n        return field;\n    }\n    // associate the field with the given form\n    // extract cross-field dependencies in a computed prop\n    const dependencies = computed(() => {\n        const rulesVal = validator.value;\n        // is falsy, a function schema or a yup schema\n        if (!rulesVal ||\n            isCallable(rulesVal) ||\n            isYupValidator(rulesVal) ||\n            isTypedSchema(rulesVal) ||\n            Array.isArray(rulesVal)) {\n            return {};\n        }\n        return Object.keys(rulesVal).reduce((acc, rule) => {\n            const deps = extractLocators(rulesVal[rule])\n                .map((dep) => dep.__locatorRef)\n                .reduce((depAcc, depName) => {\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\n                if (depValue !== undefined) {\n                    depAcc[depName] = depValue;\n                }\n                return depAcc;\n            }, {});\n            Object.assign(acc, deps);\n            return acc;\n        }, {});\n    });\n    // Adds a watcher that runs the validation whenever field dependencies change\n    watch(dependencies, (deps, oldDeps) => {\n        // Skip if no dependencies or if the field wasn't manipulated\n        if (!Object.keys(deps).length) {\n            return;\n        }\n        const shouldValidate = !isEqual(deps, oldDeps);\n        if (shouldValidate) {\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }\n    });\n    onBeforeUnmount(() => {\n        var _a;\n        const shouldKeepValue = (_a = toValue(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : toValue(form.keepValuesOnUnmount);\n        const path = toValue(name);\n        if (shouldKeepValue || !form || flags.pendingUnmount[field.id]) {\n            form === null || form === void 0 ? void 0 : form.removePathState(path, id);\n            return;\n        }\n        flags.pendingUnmount[field.id] = true;\n        const pathState = form.getPathState(path);\n        const matchesId = Array.isArray(pathState === null || pathState === void 0 ? void 0 : pathState.id) && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple)\n            ? pathState === null || pathState === void 0 ? void 0 : pathState.id.includes(field.id)\n            : (pathState === null || pathState === void 0 ? void 0 : pathState.id) === field.id;\n        if (!matchesId) {\n            return;\n        }\n        if ((pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && Array.isArray(pathState.value)) {\n            const valueIdx = pathState.value.findIndex(i => isEqual(i, toValue(field.checkedValue)));\n            if (valueIdx > -1) {\n                const newVal = [...pathState.value];\n                newVal.splice(valueIdx, 1);\n                form.setFieldValue(path, newVal);\n            }\n            if (Array.isArray(pathState.id)) {\n                pathState.id.splice(pathState.id.indexOf(field.id), 1);\n            }\n        }\n        else {\n            form.unsetPathValue(toValue(name));\n        }\n        form.removePathState(path, id);\n    });\n    return field;\n}\n/**\n * Normalizes partial field options to include the full options\n */\nfunction normalizeOptions(opts) {\n    const defaults = () => ({\n        initialValue: undefined,\n        validateOnMount: false,\n        bails: true,\n        label: undefined,\n        validateOnValueUpdate: true,\n        keepValueOnUnmount: undefined,\n        syncVModel: false,\n        controlled: true,\n    });\n    const isVModelSynced = !!(opts === null || opts === void 0 ? void 0 : opts.syncVModel);\n    const modelPropName = typeof (opts === null || opts === void 0 ? void 0 : opts.syncVModel) === 'string' ? opts.syncVModel : (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || 'modelValue';\n    const initialValue = isVModelSynced && !('initialValue' in (opts || {}))\n        ? getCurrentModelValue(getCurrentInstance(), modelPropName)\n        : opts === null || opts === void 0 ? void 0 : opts.initialValue;\n    if (!opts) {\n        return Object.assign(Object.assign({}, defaults()), { initialValue });\n    }\n    // TODO: Deprecate this in next major release\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n    const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\n    const syncVModel = (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || (opts === null || opts === void 0 ? void 0 : opts.syncVModel) || false;\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { initialValue, controlled: controlled !== null && controlled !== void 0 ? controlled : true, checkedValue,\n        syncVModel });\n}\nfunction useFieldWithChecked(name, rules, opts) {\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n    function patchCheckedApi(field) {\n        const handleChange = field.handleChange;\n        const checked = computed(() => {\n            const currentValue = toValue(field.value);\n            const checkedVal = toValue(checkedValue);\n            return Array.isArray(currentValue)\n                ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0\n                : isEqual(checkedVal, currentValue);\n        });\n        function handleCheckboxChange(e, shouldValidate = true) {\n            var _a, _b;\n            if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n                if (shouldValidate) {\n                    field.validate();\n                }\n                return;\n            }\n            const path = toValue(name);\n            const pathState = form === null || form === void 0 ? void 0 : form.getPathState(path);\n            const value = normalizeEventValue(e);\n            let newValue = (_b = toValue(checkedValue)) !== null && _b !== void 0 ? _b : value;\n            if (form && (pathState === null || pathState === void 0 ? void 0 : pathState.multiple) && pathState.type === 'checkbox') {\n                newValue = resolveNextCheckboxValue(getFromPath(form.values, path) || [], newValue, undefined);\n            }\n            else if ((opts === null || opts === void 0 ? void 0 : opts.type) === 'checkbox') {\n                newValue = resolveNextCheckboxValue(toValue(field.value), newValue, toValue(uncheckedValue));\n            }\n            handleChange(newValue, shouldValidate);\n        }\n        return Object.assign(Object.assign({}, field), { checked,\n            checkedValue,\n            uncheckedValue, handleChange: handleCheckboxChange });\n    }\n    return patchCheckedApi(_useField(name, rules, opts));\n}\nfunction useVModel({ prop, value, handleChange, shouldValidate }) {\n    const vm = getCurrentInstance();\n    /* istanbul ignore next */\n    if (!vm || !prop) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            console.warn('Failed to setup model events because `useField` was not called in setup.');\n        }\n        return;\n    }\n    const propName = typeof prop === 'string' ? prop : 'modelValue';\n    const emitName = `update:${propName}`;\n    // Component doesn't have a model prop setup (must be defined on the props)\n    if (!(propName in vm.props)) {\n        return;\n    }\n    watch(value, newValue => {\n        if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n            return;\n        }\n        vm.emit(emitName, newValue);\n    });\n    watch(() => getCurrentModelValue(vm, propName), propValue => {\n        if (propValue === IS_ABSENT && value.value === undefined) {\n            return;\n        }\n        const newValue = propValue === IS_ABSENT ? undefined : propValue;\n        if (isEqual(newValue, value.value)) {\n            return;\n        }\n        handleChange(newValue, shouldValidate());\n    });\n}\nfunction getCurrentModelValue(vm, propName) {\n    if (!vm) {\n        return undefined;\n    }\n    return vm.props[propName];\n}\n\nconst FieldImpl = /** #__PURE__ */ defineComponent({\n    name: 'Field',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: [String, Object],\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n        rules: {\n            type: [Object, String, Function],\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        validateOnBlur: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnChange: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnInput: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnModelUpdate: {\n            type: Boolean,\n            default: undefined,\n        },\n        bails: {\n            type: Boolean,\n            default: () => getConfig().bails,\n        },\n        label: {\n            type: String,\n            default: undefined,\n        },\n        uncheckedValue: {\n            type: null,\n            default: undefined,\n        },\n        modelValue: {\n            type: null,\n            default: IS_ABSENT,\n        },\n        modelModifiers: {\n            type: null,\n            default: () => ({}),\n        },\n        'onUpdate:modelValue': {\n            type: null,\n            default: undefined,\n        },\n        standalone: {\n            type: Boolean,\n            default: false,\n        },\n        keepValue: {\n            type: Boolean,\n            default: undefined,\n        },\n    },\n    setup(props, ctx) {\n        const rules = toRef(props, 'rules');\n        const name = toRef(props, 'name');\n        const label = toRef(props, 'label');\n        const uncheckedValue = toRef(props, 'uncheckedValue');\n        const keepValue = toRef(props, 'keepValue');\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\n            validateOnMount: props.validateOnMount,\n            bails: props.bails,\n            standalone: props.standalone,\n            type: ctx.attrs.type,\n            initialValue: resolveInitialValue(props, ctx),\n            // Only for checkboxes and radio buttons\n            checkedValue: ctx.attrs.value,\n            uncheckedValue,\n            label,\n            validateOnValueUpdate: props.validateOnModelUpdate,\n            keepValueOnUnmount: keepValue,\n            syncVModel: true,\n        });\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n        const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n            handleChange(e, shouldValidate);\n        };\n        const sharedProps = computed(() => {\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\n            function baseOnBlur(e) {\n                handleBlur(e, validateOnBlur);\n                if (isCallable(ctx.attrs.onBlur)) {\n                    ctx.attrs.onBlur(e);\n                }\n            }\n            function baseOnInput(e) {\n                onChangeHandler(e, validateOnInput);\n                if (isCallable(ctx.attrs.onInput)) {\n                    ctx.attrs.onInput(e);\n                }\n            }\n            function baseOnChange(e) {\n                onChangeHandler(e, validateOnChange);\n                if (isCallable(ctx.attrs.onChange)) {\n                    ctx.attrs.onChange(e);\n                }\n            }\n            const attrs = {\n                name: props.name,\n                onBlur: baseOnBlur,\n                onInput: baseOnInput,\n                onChange: baseOnChange,\n            };\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n            return attrs;\n        });\n        const fieldProps = computed(() => {\n            const attrs = Object.assign({}, sharedProps.value);\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\n                attrs.checked = checked.value;\n            }\n            const tag = resolveTag(props, ctx);\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\n                attrs.value = value.value;\n            }\n            return attrs;\n        });\n        const componentProps = computed(() => {\n            return Object.assign(Object.assign({}, sharedProps.value), { modelValue: value.value });\n        });\n        function slotProps() {\n            return {\n                field: fieldProps.value,\n                componentField: componentProps.value,\n                value: value.value,\n                meta,\n                errors: errors.value,\n                errorMessage: errorMessage.value,\n                validate: validateField,\n                resetField,\n                handleChange: onChangeHandler,\n                handleInput: e => onChangeHandler(e, false),\n                handleReset,\n                handleBlur: sharedProps.value.onBlur,\n                setTouched,\n                setErrors,\n            };\n        }\n        ctx.expose({\n            value,\n            meta,\n            errors,\n            errorMessage,\n            setErrors,\n            setTouched,\n            reset: resetField,\n            validate: validateField,\n            handleChange,\n        });\n        return () => {\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (tag) {\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n            }\n            return children;\n        };\n    },\n});\nfunction resolveTag(props, ctx) {\n    let tag = props.as || '';\n    if (!props.as && !ctx.slots.default) {\n        tag = 'input';\n    }\n    return tag;\n}\nfunction resolveValidationTriggers(props) {\n    var _a, _b, _c, _d;\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\n    return {\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\n    };\n}\nfunction resolveInitialValue(props, ctx) {\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n    if (!hasCheckedAttr(ctx.attrs.type)) {\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n    }\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\nconst PRIVATE_PATH_STATE_KEYS = ['bails', 'fieldsCount', 'id', 'multiple', 'type', 'validate'];\nfunction resolveInitialValues(opts) {\n    const providedValues = Object.assign({}, toValue((opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\n    const schema = unref(opts === null || opts === void 0 ? void 0 : opts.validationSchema);\n    if (schema && isTypedSchema(schema) && isCallable(schema.cast)) {\n        return klona(schema.cast(providedValues) || {});\n    }\n    return klona(providedValues);\n}\nfunction useForm(opts) {\n    var _a;\n    const formId = FORM_COUNTER++;\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n    let FIELD_ID_COUNTER = 0;\n    // If the form is currently submitting\n    const isSubmitting = ref(false);\n    // If the form is currently validating\n    const isValidating = ref(false);\n    // The number of times the user tried to submit the form\n    const submitCount = ref(0);\n    // field arrays managed by this form\n    const fieldArrays = [];\n    // a private ref for all form values\n    const formValues = reactive(resolveInitialValues(opts));\n    const pathStates = ref([]);\n    const extraErrorsBag = ref({});\n    const pathStateLookup = ref({});\n    const rebuildPathLookup = debounceNextTick(() => {\n        pathStateLookup.value = pathStates.value.reduce((names, state) => {\n            names[normalizeFormPath(toValue(state.path))] = state;\n            return names;\n        }, {});\n    });\n    /**\n     * Manually sets an error message on a specific field\n     */\n    function setFieldError(field, message) {\n        const state = findPathState(field);\n        if (!state) {\n            if (typeof field === 'string') {\n                extraErrorsBag.value[normalizeFormPath(field)] = normalizeErrorItem(message);\n            }\n            return;\n        }\n        // Move the error from the extras path if exists\n        if (typeof field === 'string') {\n            const normalizedPath = normalizeFormPath(field);\n            if (extraErrorsBag.value[normalizedPath]) {\n                delete extraErrorsBag.value[normalizedPath];\n            }\n        }\n        state.errors = normalizeErrorItem(message);\n        state.valid = !state.errors.length;\n    }\n    /**\n     * Sets errors for the fields specified in the object\n     */\n    function setErrors(paths) {\n        keysOf(paths).forEach(path => {\n            setFieldError(path, paths[path]);\n        });\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n        setErrors(opts.initialErrors);\n    }\n    const errorBag = computed(() => {\n        const pathErrors = pathStates.value.reduce((acc, state) => {\n            if (state.errors.length) {\n                acc[state.path] = state.errors;\n            }\n            return acc;\n        }, {});\n        return Object.assign(Object.assign({}, extraErrorsBag.value), pathErrors);\n    });\n    // Gets the first error of each field\n    const errors = computed(() => {\n        return keysOf(errorBag.value).reduce((acc, key) => {\n            const errors = errorBag.value[key];\n            if (errors === null || errors === void 0 ? void 0 : errors.length) {\n                acc[key] = errors[0];\n            }\n            return acc;\n        }, {});\n    });\n    /**\n     * Holds a computed reference to all fields names and labels\n     */\n    const fieldNames = computed(() => {\n        return pathStates.value.reduce((names, state) => {\n            names[state.path] = { name: state.path || '', label: state.label || '' };\n            return names;\n        }, {});\n    });\n    const fieldBailsMap = computed(() => {\n        return pathStates.value.reduce((map, state) => {\n            var _a;\n            map[state.path] = (_a = state.bails) !== null && _a !== void 0 ? _a : true;\n            return map;\n        }, {});\n    });\n    // mutable non-reactive reference to initial errors\n    // we need this to process initial errors then unset them\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\n    const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\n    // initial form values\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(pathStates, formValues, opts);\n    // form meta aggregations\n    const meta = useFormMeta(pathStates, formValues, originalInitialValues, errors);\n    const controlledValues = computed(() => {\n        return pathStates.value.reduce((acc, state) => {\n            const value = getFromPath(formValues, state.path);\n            setInPath(acc, state.path, value);\n            return acc;\n        }, {});\n    });\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n    function createPathState(path, config) {\n        var _a, _b;\n        const initialValue = computed(() => getFromPath(initialValues.value, toValue(path)));\n        const pathStateExists = pathStateLookup.value[toValue(path)];\n        const isCheckboxOrRadio = (config === null || config === void 0 ? void 0 : config.type) === 'checkbox' || (config === null || config === void 0 ? void 0 : config.type) === 'radio';\n        if (pathStateExists && isCheckboxOrRadio) {\n            pathStateExists.multiple = true;\n            const id = FIELD_ID_COUNTER++;\n            if (Array.isArray(pathStateExists.id)) {\n                pathStateExists.id.push(id);\n            }\n            else {\n                pathStateExists.id = [pathStateExists.id, id];\n            }\n            pathStateExists.fieldsCount++;\n            pathStateExists.__flags.pendingUnmount[id] = false;\n            return pathStateExists;\n        }\n        const currentValue = computed(() => getFromPath(formValues, toValue(path)));\n        const pathValue = toValue(path);\n        const unsetBatchIndex = UNSET_BATCH.findIndex(_path => _path === pathValue);\n        if (unsetBatchIndex !== -1) {\n            UNSET_BATCH.splice(unsetBatchIndex, 1);\n        }\n        const isRequired = computed(() => {\n            var _a, _b, _c, _d, _e, _f;\n            if (isTypedSchema(schema)) {\n                return (_c = (_b = (_a = schema).describe) === null || _b === void 0 ? void 0 : _b.call(_a, toValue(path)).required) !== null && _c !== void 0 ? _c : false;\n            }\n            // Path own schema\n            if (isTypedSchema(config === null || config === void 0 ? void 0 : config.schema)) {\n                return (_f = (_e = (_d = (config === null || config === void 0 ? void 0 : config.schema)).describe) === null || _e === void 0 ? void 0 : _e.call(_d).required) !== null && _f !== void 0 ? _f : false;\n            }\n            return false;\n        });\n        const id = FIELD_ID_COUNTER++;\n        const state = reactive({\n            id,\n            path,\n            touched: false,\n            pending: false,\n            valid: true,\n            validated: !!((_a = initialErrors[pathValue]) === null || _a === void 0 ? void 0 : _a.length),\n            required: isRequired,\n            initialValue,\n            errors: shallowRef([]),\n            bails: (_b = config === null || config === void 0 ? void 0 : config.bails) !== null && _b !== void 0 ? _b : false,\n            label: config === null || config === void 0 ? void 0 : config.label,\n            type: (config === null || config === void 0 ? void 0 : config.type) || 'default',\n            value: currentValue,\n            multiple: false,\n            __flags: {\n                pendingUnmount: { [id]: false },\n                pendingReset: false,\n            },\n            fieldsCount: 1,\n            validate: config === null || config === void 0 ? void 0 : config.validate,\n            dirty: computed(() => {\n                return !isEqual(unref(currentValue), unref(initialValue));\n            }),\n        });\n        pathStates.value.push(state);\n        pathStateLookup.value[pathValue] = state;\n        rebuildPathLookup();\n        if (errors.value[pathValue] && !initialErrors[pathValue]) {\n            nextTick(() => {\n                validateField(pathValue, { mode: 'silent' });\n            });\n        }\n        // Handles when a path changes\n        if (isRef(path)) {\n            watch(path, newPath => {\n                rebuildPathLookup();\n                const nextValue = klona(currentValue.value);\n                pathStateLookup.value[newPath] = state;\n                nextTick(() => {\n                    setInPath(formValues, newPath, nextValue);\n                });\n            });\n        }\n        return state;\n    }\n    /**\n     * Batches validation runs in 5ms batches\n     * Must have two distinct batch queues to make sure they don't override each other settings #3783\n     */\n    const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n    const debouncedValidation = debounceAsync(_validateSchema, 5);\n    const validateSchema = withLatest(async (mode) => {\n        return (await (mode === 'silent'\n            ? debouncedSilentValidation()\n            : debouncedValidation()));\n    }, (formResult, [mode]) => {\n        // fields by id lookup\n        // errors fields names, we need it to also check if custom errors are updated\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\n        // collect all the keys from the schema and all fields\n        // this ensures we have a complete key map of all the fields\n        const paths = [\n            ...new Set([...keysOf(formResult.results), ...pathStates.value.map(p => p.path), ...currentErrorsPaths]),\n        ].sort();\n        // aggregates the paths into a single result object while applying the results on the fields\n        const results = paths.reduce((validation, _path) => {\n            var _a;\n            const expectedPath = _path;\n            const pathState = findPathState(expectedPath) || findHoistedPath(expectedPath);\n            const messages = ((_a = formResult.results[expectedPath]) === null || _a === void 0 ? void 0 : _a.errors) || [];\n            // This is the real path of the field, because it might've been a hoisted field\n            const path = (toValue(pathState === null || pathState === void 0 ? void 0 : pathState.path) || expectedPath);\n            // It is possible that multiple paths are collected across loops\n            // We want to merge them to avoid overriding any iteration's results\n            const fieldResult = mergeValidationResults({ errors: messages, valid: !messages.length }, validation.results[path]);\n            validation.results[path] = fieldResult;\n            if (!fieldResult.valid) {\n                validation.errors[path] = fieldResult.errors[0];\n            }\n            // clean up extra errors if path state exists\n            if (pathState && extraErrorsBag.value[path]) {\n                delete extraErrorsBag.value[path];\n            }\n            // field not rendered\n            if (!pathState) {\n                setFieldError(path, messages);\n                return validation;\n            }\n            // always update the valid flag regardless of the mode\n            pathState.valid = fieldResult.valid;\n            if (mode === 'silent') {\n                return validation;\n            }\n            if (mode === 'validated-only' && !pathState.validated) {\n                return validation;\n            }\n            setFieldError(pathState, fieldResult.errors);\n            return validation;\n        }, { valid: formResult.valid, results: {}, errors: {} });\n        if (formResult.values) {\n            results.values = formResult.values;\n        }\n        keysOf(results.results).forEach(path => {\n            var _a;\n            const pathState = findPathState(path);\n            if (!pathState) {\n                return;\n            }\n            if (mode === 'silent') {\n                return;\n            }\n            if (mode === 'validated-only' && !pathState.validated) {\n                return;\n            }\n            setFieldError(pathState, (_a = results.results[path]) === null || _a === void 0 ? void 0 : _a.errors);\n        });\n        return results;\n    });\n    function mutateAllPathState(mutation) {\n        pathStates.value.forEach(mutation);\n    }\n    function findPathState(path) {\n        const normalizedPath = typeof path === 'string' ? normalizeFormPath(path) : path;\n        const pathState = typeof normalizedPath === 'string' ? pathStateLookup.value[normalizedPath] : normalizedPath;\n        return pathState;\n    }\n    function findHoistedPath(path) {\n        const candidates = pathStates.value.filter(state => path.startsWith(state.path));\n        return candidates.reduce((bestCandidate, candidate) => {\n            if (!bestCandidate) {\n                return candidate;\n            }\n            return (candidate.path.length > bestCandidate.path.length ? candidate : bestCandidate);\n        }, undefined);\n    }\n    let UNSET_BATCH = [];\n    let PENDING_UNSET;\n    function unsetPathValue(path) {\n        UNSET_BATCH.push(path);\n        if (!PENDING_UNSET) {\n            PENDING_UNSET = nextTick(() => {\n                const sortedPaths = [...UNSET_BATCH].sort().reverse();\n                sortedPaths.forEach(p => {\n                    unsetPath(formValues, p);\n                });\n                UNSET_BATCH = [];\n                PENDING_UNSET = null;\n            });\n        }\n        return PENDING_UNSET;\n    }\n    function makeSubmissionFactory(onlyControlled) {\n        return function submitHandlerFactory(fn, onValidationError) {\n            return function submissionHandler(e) {\n                if (e instanceof Event) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                // Touch all fields\n                mutateAllPathState(s => (s.touched = true));\n                isSubmitting.value = true;\n                submitCount.value++;\n                return validate()\n                    .then(result => {\n                    const values = klona(formValues);\n                    if (result.valid && typeof fn === 'function') {\n                        const controlled = klona(controlledValues.value);\n                        let submittedValues = (onlyControlled ? controlled : values);\n                        if (result.values) {\n                            submittedValues = result.values;\n                        }\n                        return fn(submittedValues, {\n                            evt: e,\n                            controlledValues: controlled,\n                            setErrors,\n                            setFieldError,\n                            setTouched,\n                            setFieldTouched,\n                            setValues,\n                            setFieldValue,\n                            resetForm,\n                            resetField,\n                        });\n                    }\n                    if (!result.valid && typeof onValidationError === 'function') {\n                        onValidationError({\n                            values,\n                            evt: e,\n                            errors: result.errors,\n                            results: result.results,\n                        });\n                    }\n                })\n                    .then(returnVal => {\n                    isSubmitting.value = false;\n                    return returnVal;\n                }, err => {\n                    isSubmitting.value = false;\n                    // re-throw the err so it doesn't go silent\n                    throw err;\n                });\n            };\n        };\n    }\n    const handleSubmitImpl = makeSubmissionFactory(false);\n    const handleSubmit = handleSubmitImpl;\n    handleSubmit.withControlled = makeSubmissionFactory(true);\n    function removePathState(path, id) {\n        const idx = pathStates.value.findIndex(s => {\n            return s.path === path && (Array.isArray(s.id) ? s.id.includes(id) : s.id === id);\n        });\n        const pathState = pathStates.value[idx];\n        if (idx === -1 || !pathState) {\n            return;\n        }\n        nextTick(() => {\n            validateField(path, { mode: 'silent', warn: false });\n        });\n        if (pathState.multiple && pathState.fieldsCount) {\n            pathState.fieldsCount--;\n        }\n        if (Array.isArray(pathState.id)) {\n            const idIndex = pathState.id.indexOf(id);\n            if (idIndex >= 0) {\n                pathState.id.splice(idIndex, 1);\n            }\n            delete pathState.__flags.pendingUnmount[id];\n        }\n        if (!pathState.multiple || pathState.fieldsCount <= 0) {\n            pathStates.value.splice(idx, 1);\n            unsetInitialValue(path);\n            rebuildPathLookup();\n            delete pathStateLookup.value[path];\n        }\n    }\n    function destroyPath(path) {\n        keysOf(pathStateLookup.value).forEach(key => {\n            if (key.startsWith(path)) {\n                delete pathStateLookup.value[key];\n            }\n        });\n        pathStates.value = pathStates.value.filter(s => !s.path.startsWith(path));\n        nextTick(() => {\n            rebuildPathLookup();\n        });\n    }\n    const formCtx = {\n        formId,\n        values: formValues,\n        controlledValues,\n        errorBag,\n        errors,\n        schema,\n        submitCount,\n        meta,\n        isSubmitting,\n        isValidating,\n        fieldArrays,\n        keepValuesOnUnmount,\n        validateSchema: unref(schema) ? validateSchema : undefined,\n        validate,\n        setFieldError,\n        validateField,\n        setFieldValue,\n        setValues,\n        setErrors,\n        setFieldTouched,\n        setTouched,\n        resetForm,\n        resetField,\n        handleSubmit,\n        useFieldModel,\n        defineInputBinds,\n        defineComponentBinds: defineComponentBinds,\n        defineField,\n        stageInitialValue,\n        unsetInitialValue,\n        setFieldInitialValue,\n        createPathState,\n        getPathState: findPathState,\n        unsetPathValue,\n        removePathState,\n        initialValues: initialValues,\n        getAllPathStates: () => pathStates.value,\n        destroyPath,\n        isFieldTouched,\n        isFieldDirty,\n        isFieldValid,\n    };\n    /**\n     * Sets a single field value\n     */\n    function setFieldValue(field, value, shouldValidate = true) {\n        const clonedValue = klona(value);\n        const path = typeof field === 'string' ? field : field.path;\n        const pathState = findPathState(path);\n        if (!pathState) {\n            createPathState(path);\n        }\n        setInPath(formValues, path, clonedValue);\n        if (shouldValidate) {\n            validateField(path);\n        }\n    }\n    function forceSetValues(fields, shouldValidate = true) {\n        // clean up old values\n        keysOf(formValues).forEach(key => {\n            delete formValues[key];\n        });\n        // set up new values\n        keysOf(fields).forEach(path => {\n            setFieldValue(path, fields[path], false);\n        });\n        if (shouldValidate) {\n            validate();\n        }\n    }\n    /**\n     * Sets multiple fields values\n     */\n    function setValues(fields, shouldValidate = true) {\n        merge(formValues, fields);\n        // regenerate the arrays when the form values change\n        fieldArrays.forEach(f => f && f.reset());\n        if (shouldValidate) {\n            validate();\n        }\n    }\n    function createModel(path, shouldValidate) {\n        const pathState = findPathState(toValue(path)) || createPathState(path);\n        return computed({\n            get() {\n                return pathState.value;\n            },\n            set(value) {\n                var _a;\n                const pathValue = toValue(path);\n                setFieldValue(pathValue, value, (_a = toValue(shouldValidate)) !== null && _a !== void 0 ? _a : false);\n            },\n        });\n    }\n    /**\n     * Sets the touched meta state on a field\n     */\n    function setFieldTouched(field, isTouched) {\n        const pathState = findPathState(field);\n        if (pathState) {\n            pathState.touched = isTouched;\n        }\n    }\n    function isFieldTouched(field) {\n        const pathState = findPathState(field);\n        if (pathState) {\n            return pathState.touched;\n        }\n        // Find all nested paths and consider their touched state\n        return pathStates.value.filter(s => s.path.startsWith(field)).some(s => s.touched);\n    }\n    function isFieldDirty(field) {\n        const pathState = findPathState(field);\n        if (pathState) {\n            return pathState.dirty;\n        }\n        return pathStates.value.filter(s => s.path.startsWith(field)).some(s => s.dirty);\n    }\n    function isFieldValid(field) {\n        const pathState = findPathState(field);\n        if (pathState) {\n            return pathState.valid;\n        }\n        return pathStates.value.filter(s => s.path.startsWith(field)).every(s => s.valid);\n    }\n    /**\n     * Sets the touched meta state on multiple fields\n     */\n    function setTouched(fields) {\n        if (typeof fields === 'boolean') {\n            mutateAllPathState(state => {\n                state.touched = fields;\n            });\n            return;\n        }\n        keysOf(fields).forEach(field => {\n            setFieldTouched(field, !!fields[field]);\n        });\n    }\n    function resetField(field, state) {\n        var _a;\n        const newValue = state && 'value' in state ? state.value : getFromPath(initialValues.value, field);\n        const pathState = findPathState(field);\n        if (pathState) {\n            pathState.__flags.pendingReset = true;\n        }\n        setFieldInitialValue(field, klona(newValue), true);\n        setFieldValue(field, newValue, false);\n        setFieldTouched(field, (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false);\n        setFieldError(field, (state === null || state === void 0 ? void 0 : state.errors) || []);\n        nextTick(() => {\n            if (pathState) {\n                pathState.__flags.pendingReset = false;\n            }\n        });\n    }\n    /**\n     * Resets all fields\n     */\n    function resetForm(resetState, opts) {\n        let newValues = klona((resetState === null || resetState === void 0 ? void 0 : resetState.values) ? resetState.values : originalInitialValues.value);\n        newValues = (opts === null || opts === void 0 ? void 0 : opts.force) ? newValues : merge(originalInitialValues.value, newValues);\n        newValues = isTypedSchema(schema) && isCallable(schema.cast) ? schema.cast(newValues) : newValues;\n        setInitialValues(newValues);\n        mutateAllPathState(state => {\n            var _a;\n            state.__flags.pendingReset = true;\n            state.validated = false;\n            state.touched = ((_a = resetState === null || resetState === void 0 ? void 0 : resetState.touched) === null || _a === void 0 ? void 0 : _a[state.path]) || false;\n            setFieldValue(state.path, getFromPath(newValues, state.path), false);\n            setFieldError(state.path, undefined);\n        });\n        (opts === null || opts === void 0 ? void 0 : opts.force) ? forceSetValues(newValues, false) : setValues(newValues, false);\n        setErrors((resetState === null || resetState === void 0 ? void 0 : resetState.errors) || {});\n        submitCount.value = (resetState === null || resetState === void 0 ? void 0 : resetState.submitCount) || 0;\n        nextTick(() => {\n            validate({ mode: 'silent' });\n            mutateAllPathState(state => {\n                state.__flags.pendingReset = false;\n            });\n        });\n    }\n    async function validate(opts) {\n        const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\n        if (mode === 'force') {\n            mutateAllPathState(f => (f.validated = true));\n        }\n        if (formCtx.validateSchema) {\n            return formCtx.validateSchema(mode);\n        }\n        isValidating.value = true;\n        // No schema, each field is responsible to validate itself\n        const validations = await Promise.all(pathStates.value.map(state => {\n            if (!state.validate) {\n                return Promise.resolve({\n                    key: state.path,\n                    valid: true,\n                    errors: [],\n                });\n            }\n            return state.validate(opts).then((result) => {\n                return {\n                    key: state.path,\n                    valid: result.valid,\n                    errors: result.errors,\n                };\n            });\n        }));\n        isValidating.value = false;\n        const results = {};\n        const errors = {};\n        for (const validation of validations) {\n            results[validation.key] = {\n                valid: validation.valid,\n                errors: validation.errors,\n            };\n            if (validation.errors.length) {\n                errors[validation.key] = validation.errors[0];\n            }\n        }\n        return {\n            valid: validations.every(r => r.valid),\n            results,\n            errors,\n        };\n    }\n    async function validateField(path, opts) {\n        var _a;\n        const state = findPathState(path);\n        if (state && (opts === null || opts === void 0 ? void 0 : opts.mode) !== 'silent') {\n            state.validated = true;\n        }\n        if (schema) {\n            const { results } = await validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'validated-only');\n            return results[path] || { errors: [], valid: true };\n        }\n        if (state === null || state === void 0 ? void 0 : state.validate) {\n            return state.validate(opts);\n        }\n        const shouldWarn = !state && ((_a = opts === null || opts === void 0 ? void 0 : opts.warn) !== null && _a !== void 0 ? _a : true);\n        if (shouldWarn) {\n            if ((process.env.NODE_ENV !== 'production')) {\n                warn$1(`field with path ${path} was not found`);\n            }\n        }\n        return Promise.resolve({ errors: [], valid: true });\n    }\n    function unsetInitialValue(path) {\n        unsetPath(initialValues.value, path);\n    }\n    /**\n     * Sneaky function to set initial field values\n     */\n    function stageInitialValue(path, value, updateOriginal = false) {\n        setFieldInitialValue(path, value);\n        setInPath(formValues, path, value);\n        if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n            setInPath(originalInitialValues.value, path, klona(value));\n        }\n    }\n    function setFieldInitialValue(path, value, updateOriginal = false) {\n        setInPath(initialValues.value, path, klona(value));\n        if (updateOriginal) {\n            setInPath(originalInitialValues.value, path, klona(value));\n        }\n    }\n    async function _validateSchema() {\n        const schemaValue = unref(schema);\n        if (!schemaValue) {\n            return { valid: true, results: {}, errors: {} };\n        }\n        isValidating.value = true;\n        const formResult = isYupValidator(schemaValue) || isTypedSchema(schemaValue)\n            ? await validateTypedSchema(schemaValue, formValues)\n            : await validateObjectSchema(schemaValue, formValues, {\n                names: fieldNames.value,\n                bailsMap: fieldBailsMap.value,\n            });\n        isValidating.value = false;\n        return formResult;\n    }\n    const submitForm = handleSubmit((_, { evt }) => {\n        if (isFormSubmitEvent(evt)) {\n            evt.target.submit();\n        }\n    });\n    // Trigger initial validation\n    onMounted(() => {\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n            setErrors(opts.initialErrors);\n        }\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n            setTouched(opts.initialTouched);\n        }\n        // if validate on mount was enabled\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n            validate();\n            return;\n        }\n        // otherwise run initial silent validation through schema if available\n        // the useField should skip their own silent validation if a yup schema is present\n        if (formCtx.validateSchema) {\n            formCtx.validateSchema('silent');\n        }\n    });\n    if (isRef(schema)) {\n        watch(schema, () => {\n            var _a;\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n        });\n    }\n    // Provide injections\n    provide(FormContextKey, formCtx);\n    if ((process.env.NODE_ENV !== 'production')) {\n        registerFormWithDevTools(formCtx);\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, isValidating: isValidating.value, submitCount: submitCount.value })), refreshInspector, {\n            deep: true,\n        });\n    }\n    function defineField(path, config) {\n        const label = isCallable(config) ? undefined : config === null || config === void 0 ? void 0 : config.label;\n        const pathState = (findPathState(toValue(path)) || createPathState(path, { label }));\n        const evalConfig = () => (isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {});\n        function onBlur() {\n            var _a;\n            pathState.touched = true;\n            const validateOnBlur = (_a = evalConfig().validateOnBlur) !== null && _a !== void 0 ? _a : getConfig().validateOnBlur;\n            if (validateOnBlur) {\n                validateField(pathState.path);\n            }\n        }\n        function onInput() {\n            var _a;\n            const validateOnInput = (_a = evalConfig().validateOnInput) !== null && _a !== void 0 ? _a : getConfig().validateOnInput;\n            if (validateOnInput) {\n                nextTick(() => {\n                    validateField(pathState.path);\n                });\n            }\n        }\n        function onChange() {\n            var _a;\n            const validateOnChange = (_a = evalConfig().validateOnChange) !== null && _a !== void 0 ? _a : getConfig().validateOnChange;\n            if (validateOnChange) {\n                nextTick(() => {\n                    validateField(pathState.path);\n                });\n            }\n        }\n        const props = computed(() => {\n            const base = {\n                onChange,\n                onInput,\n                onBlur,\n            };\n            if (isCallable(config)) {\n                return Object.assign(Object.assign({}, base), (config(omit(pathState, PRIVATE_PATH_STATE_KEYS)).props || {}));\n            }\n            if (config === null || config === void 0 ? void 0 : config.props) {\n                return Object.assign(Object.assign({}, base), config.props(omit(pathState, PRIVATE_PATH_STATE_KEYS)));\n            }\n            return base;\n        });\n        const model = createModel(path, () => { var _a, _b, _c; return (_c = (_a = evalConfig().validateOnModelUpdate) !== null && _a !== void 0 ? _a : (_b = getConfig()) === null || _b === void 0 ? void 0 : _b.validateOnModelUpdate) !== null && _c !== void 0 ? _c : true; });\n        return [model, props];\n    }\n    function useFieldModel(pathOrPaths) {\n        if (!Array.isArray(pathOrPaths)) {\n            return createModel(pathOrPaths);\n        }\n        return pathOrPaths.map(p => createModel(p, true));\n    }\n    /**\n     * @deprecated use defineField instead\n     */\n    function defineInputBinds(path, config) {\n        const [model, props] = defineField(path, config);\n        function onBlur() {\n            props.value.onBlur();\n        }\n        function onInput(e) {\n            const value = normalizeEventValue(e);\n            setFieldValue(toValue(path), value, false);\n            props.value.onInput();\n        }\n        function onChange(e) {\n            const value = normalizeEventValue(e);\n            setFieldValue(toValue(path), value, false);\n            props.value.onChange();\n        }\n        return computed(() => {\n            return Object.assign(Object.assign({}, props.value), { onBlur,\n                onInput,\n                onChange, value: model.value });\n        });\n    }\n    /**\n     * @deprecated use defineField instead\n     */\n    function defineComponentBinds(path, config) {\n        const [model, props] = defineField(path, config);\n        const pathState = findPathState(toValue(path));\n        function onUpdateModelValue(value) {\n            model.value = value;\n        }\n        return computed(() => {\n            const conf = isCallable(config) ? config(omit(pathState, PRIVATE_PATH_STATE_KEYS)) : config || {};\n            return Object.assign({ [conf.model || 'modelValue']: model.value, [`onUpdate:${conf.model || 'modelValue'}`]: onUpdateModelValue }, props.value);\n        });\n    }\n    return Object.assign(Object.assign({}, formCtx), { values: readonly(formValues), handleReset: () => resetForm(), submitForm });\n}\n/**\n * Manages form meta aggregation\n */\nfunction useFormMeta(pathsState, currentValues, initialValues, errors) {\n    const MERGE_STRATEGIES = {\n        touched: 'some',\n        pending: 'some',\n        valid: 'every',\n    };\n    const isDirty = computed(() => {\n        return !isEqual(currentValues, unref(initialValues));\n    });\n    function calculateFlags() {\n        const states = pathsState.value;\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n            const mergeMethod = MERGE_STRATEGIES[flag];\n            acc[flag] = states[mergeMethod](s => s[flag]);\n            return acc;\n        }, {});\n    }\n    const flags = reactive(calculateFlags());\n    watchEffect(() => {\n        const value = calculateFlags();\n        flags.touched = value.touched;\n        flags.valid = value.valid;\n        flags.pending = value.pending;\n    });\n    return computed(() => {\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\n    });\n}\n/**\n * Manages the initial values prop\n */\nfunction useFormInitialValues(pathsState, formValues, opts) {\n    const values = resolveInitialValues(opts);\n    // these are the mutable initial values as the fields are mounted/unmounted\n    const initialValues = ref(values);\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n    // so these are the values that the reset function should use\n    // these only change when the user explicitly changes the initial values or when the user resets them with new values.\n    const originalInitialValues = ref(klona(values));\n    function setInitialValues(values, updateFields = false) {\n        initialValues.value = merge(klona(initialValues.value) || {}, klona(values));\n        originalInitialValues.value = merge(klona(originalInitialValues.value) || {}, klona(values));\n        if (!updateFields) {\n            return;\n        }\n        // update the pristine non-touched fields\n        // those are excluded because it's unlikely you want to change the form values using initial values\n        // we mostly watch them for API population or newly inserted fields\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n        pathsState.value.forEach(state => {\n            const wasTouched = state.touched;\n            if (wasTouched) {\n                return;\n            }\n            const newValue = getFromPath(initialValues.value, state.path);\n            setInPath(formValues, state.path, klona(newValue));\n        });\n    }\n    return {\n        initialValues,\n        originalInitialValues,\n        setInitialValues,\n    };\n}\nfunction mergeValidationResults(a, b) {\n    if (!b) {\n        return a;\n    }\n    return {\n        valid: a.valid && b.valid,\n        errors: [...a.errors, ...b.errors],\n    };\n}\n\nconst FormImpl = /** #__PURE__ */ defineComponent({\n    name: 'Form',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: null,\n            default: 'form',\n        },\n        validationSchema: {\n            type: Object,\n            default: undefined,\n        },\n        initialValues: {\n            type: Object,\n            default: undefined,\n        },\n        initialErrors: {\n            type: Object,\n            default: undefined,\n        },\n        initialTouched: {\n            type: Object,\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        onSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        onInvalidSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        keepValues: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    setup(props, ctx) {\n        const validationSchema = toRef(props, 'validationSchema');\n        const keepValues = toRef(props, 'keepValues');\n        const { errors, errorBag, values, meta, isSubmitting, isValidating, submitCount, controlledValues, validate, validateField, handleReset, resetForm, handleSubmit, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, resetField, } = useForm({\n            validationSchema: validationSchema.value ? validationSchema : undefined,\n            initialValues: props.initialValues,\n            initialErrors: props.initialErrors,\n            initialTouched: props.initialTouched,\n            validateOnMount: props.validateOnMount,\n            keepValuesOnUnmount: keepValues,\n        });\n        const submitForm = handleSubmit((_, { evt }) => {\n            if (isFormSubmitEvent(evt)) {\n                evt.target.submit();\n            }\n        }, props.onInvalidSubmit);\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n        function handleFormReset(e) {\n            if (isEvent(e)) {\n                // Prevent default form reset behavior\n                e.preventDefault();\n            }\n            handleReset();\n            if (typeof ctx.attrs.onReset === 'function') {\n                ctx.attrs.onReset();\n            }\n        }\n        function handleScopedSlotSubmit(evt, onSubmit) {\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n        }\n        function getValues() {\n            return klona(values);\n        }\n        function getMeta() {\n            return klona(meta.value);\n        }\n        function getErrors() {\n            return klona(errors.value);\n        }\n        function slotProps() {\n            return {\n                meta: meta.value,\n                errors: errors.value,\n                errorBag: errorBag.value,\n                values,\n                isSubmitting: isSubmitting.value,\n                isValidating: isValidating.value,\n                submitCount: submitCount.value,\n                controlledValues: controlledValues.value,\n                validate,\n                validateField,\n                handleSubmit: handleScopedSlotSubmit,\n                handleReset,\n                submitForm,\n                setErrors,\n                setFieldError,\n                setFieldValue,\n                setValues,\n                setFieldTouched,\n                setTouched,\n                resetForm,\n                resetField,\n                getValues,\n                getMeta,\n                getErrors,\n            };\n        }\n        // expose these functions and methods as part of public API\n        ctx.expose({\n            setFieldError,\n            setErrors,\n            setFieldValue,\n            setValues,\n            setFieldTouched,\n            setTouched,\n            resetForm,\n            validate,\n            validateField,\n            resetField,\n            getValues,\n            getMeta,\n            getErrors,\n            values,\n            meta,\n            errors,\n        });\n        return function renderForm() {\n            // avoid resolving the form component as itself\n            const tag = props.as === 'form' ? props.as : !props.as ? null : resolveDynamicComponent(props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (!tag) {\n                return children;\n            }\n            // Attributes to add on a native `form` tag\n            const formAttrs = tag === 'form'\n                ? {\n                    // Disables native validation as vee-validate will handle it.\n                    novalidate: true,\n                }\n                : {};\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\n        };\n    },\n});\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\n    const form = injectWithSelf(FormContextKey, undefined);\n    const fields = ref([]);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const noOp = () => { };\n    const noOpApi = {\n        fields,\n        remove: noOp,\n        push: noOp,\n        swap: noOp,\n        insert: noOp,\n        update: noOp,\n        replace: noOp,\n        prepend: noOp,\n        move: noOp,\n    };\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n        }\n        return noOpApi;\n    }\n    if (!unref(arrayPath)) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n        }\n        return noOpApi;\n    }\n    const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n    if (alreadyExists) {\n        return alreadyExists;\n    }\n    let entryCounter = 0;\n    function getCurrentValues() {\n        return getFromPath(form === null || form === void 0 ? void 0 : form.values, toValue(arrayPath), []) || [];\n    }\n    function initFields() {\n        const currentValues = getCurrentValues();\n        if (!Array.isArray(currentValues)) {\n            return;\n        }\n        fields.value = currentValues.map((v, idx) => createEntry(v, idx, fields.value));\n        updateEntryFlags();\n    }\n    initFields();\n    function updateEntryFlags() {\n        const fieldsLength = fields.value.length;\n        for (let i = 0; i < fieldsLength; i++) {\n            const entry = fields.value[i];\n            entry.isFirst = i === 0;\n            entry.isLast = i === fieldsLength - 1;\n        }\n    }\n    function createEntry(value, idx, currentFields) {\n        // Skips the work by returning the current entry if it already exists\n        // This should make the `key` prop stable and doesn't cause more re-renders than needed\n        // The value is computed and should update anyways\n        if (currentFields && !isNullOrUndefined(idx) && currentFields[idx]) {\n            return currentFields[idx];\n        }\n        const key = entryCounter++;\n        const entry = {\n            key,\n            value: computedDeep({\n                get() {\n                    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, toValue(arrayPath), []) || [];\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    return idx === -1 ? value : currentValues[idx];\n                },\n                set(value) {\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    if (idx === -1) {\n                        if ((process.env.NODE_ENV !== 'production')) {\n                            warn(`Attempting to update a non-existent array item`);\n                        }\n                        return;\n                    }\n                    update(idx, value);\n                },\n            }), // will be auto unwrapped\n            isFirst: false,\n            isLast: false,\n        };\n        return entry;\n    }\n    function afterMutation() {\n        updateEntryFlags();\n        // Should trigger a silent validation since a field may not do that #4096\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'silent' });\n    }\n    function remove(idx) {\n        const pathName = toValue(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!pathValue || !Array.isArray(pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        newValue.splice(idx, 1);\n        const fieldPath = pathName + `[${idx}]`;\n        form.destroyPath(fieldPath);\n        form.unsetInitialValue(fieldPath);\n        setInPath(form.values, pathName, newValue);\n        fields.value.splice(idx, 1);\n        afterMutation();\n    }\n    function push(initialValue) {\n        const value = klona(initialValue);\n        const pathName = toValue(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [...normalizedPathValue];\n        newValue.push(value);\n        form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n        setInPath(form.values, pathName, newValue);\n        fields.value.push(createEntry(value));\n        afterMutation();\n    }\n    function swap(indexA, indexB) {\n        const pathName = toValue(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        // the old switcheroo\n        const temp = newValue[indexA];\n        newValue[indexA] = newValue[indexB];\n        newValue[indexB] = temp;\n        const tempEntry = newFields[indexA];\n        newFields[indexA] = newFields[indexB];\n        newFields[indexB] = tempEntry;\n        setInPath(form.values, pathName, newValue);\n        fields.value = newFields;\n        updateEntryFlags();\n    }\n    function insert(idx, initialValue) {\n        const value = klona(initialValue);\n        const pathName = toValue(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        newValue.splice(idx, 0, value);\n        newFields.splice(idx, 0, createEntry(value));\n        setInPath(form.values, pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    function replace(arr) {\n        const pathName = toValue(arrayPath);\n        form.stageInitialValue(pathName, arr);\n        setInPath(form.values, pathName, arr);\n        initFields();\n        afterMutation();\n    }\n    function update(idx, value) {\n        const pathName = toValue(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n            return;\n        }\n        setInPath(form.values, `${pathName}[${idx}]`, value);\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'validated-only' });\n    }\n    function prepend(initialValue) {\n        const value = klona(initialValue);\n        const pathName = toValue(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [value, ...normalizedPathValue];\n        setInPath(form.values, pathName, newValue);\n        form.stageInitialValue(pathName + `[0]`, value);\n        fields.value.unshift(createEntry(value));\n        afterMutation();\n    }\n    function move(oldIdx, newIdx) {\n        const pathName = toValue(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n        if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n            return;\n        }\n        const newFields = [...fields.value];\n        const movedItem = newFields[oldIdx];\n        newFields.splice(oldIdx, 1);\n        newFields.splice(newIdx, 0, movedItem);\n        const movedValue = newValue[oldIdx];\n        newValue.splice(oldIdx, 1);\n        newValue.splice(newIdx, 0, movedValue);\n        setInPath(form.values, pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    const fieldArrayCtx = {\n        fields,\n        remove,\n        push,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move,\n    };\n    form.fieldArrays.push(Object.assign({ path: arrayPath, reset: initFields }, fieldArrayCtx));\n    onBeforeUnmount(() => {\n        const idx = form.fieldArrays.findIndex(i => toValue(i.path) === toValue(arrayPath));\n        if (idx >= 0) {\n            form.fieldArrays.splice(idx, 1);\n        }\n    });\n    // Makes sure to sync the form values with the array value if they go out of sync\n    // #4153\n    watch(getCurrentValues, formValues => {\n        const fieldsValues = fields.value.map(f => f.value);\n        // If form values are not the same as the current values then something overrode them.\n        if (!isEqual(formValues, fieldsValues)) {\n            initFields();\n        }\n    });\n    return fieldArrayCtx;\n}\n\nconst FieldArrayImpl = /** #__PURE__ */ defineComponent({\n    name: 'FieldArray',\n    inheritAttrs: false,\n    props: {\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const { push, remove, swap, insert, replace, update, prepend, move, fields } = useFieldArray(() => props.name);\n        function slotProps() {\n            return {\n                fields: fields.value,\n                push,\n                remove,\n                swap,\n                insert,\n                update,\n                replace,\n                prepend,\n                move,\n            };\n        }\n        ctx.expose({\n            push,\n            remove,\n            swap,\n            insert,\n            update,\n            replace,\n            prepend,\n            move,\n        });\n        return () => {\n            const children = normalizeChildren(undefined, ctx, slotProps);\n            return children;\n        };\n    },\n});\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = /** #__PURE__ */ defineComponent({\n    name: 'ErrorMessage',\n    props: {\n        as: {\n            type: String,\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const form = inject(FormContextKey, undefined);\n        const message = computed(() => {\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n        });\n        function slotProps() {\n            return {\n                message: message.value,\n            };\n        }\n        return () => {\n            // Renders nothing if there are no messages\n            if (!message.value) {\n                return undefined;\n            }\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\n            // If no tag was specified and there are children\n            // render the slot as is without wrapping it\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n                return children;\n            }\n            // If no children in slot\n            // render whatever specified and fallback to a <span> with the message in it's contents\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n                return h(tag || 'span', attrs, message.value);\n            }\n            return h(tag, attrs, children);\n        };\n    },\n});\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return function resetForm(state) {\n        if (!form) {\n            return;\n        }\n        return form.resetForm(state);\n    };\n}\n\n/**\n * If a field is dirty or not\n */\nfunction useIsFieldDirty(path) {\n    const fieldOrPath = resolveFieldOrPathState(path);\n    return computed(() => {\n        var _a, _b;\n        if (!fieldOrPath) {\n            return false;\n        }\n        return (_b = ('meta' in fieldOrPath ? fieldOrPath.meta.dirty : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.dirty)) !== null && _b !== void 0 ? _b : false;\n    });\n}\n\n/**\n * If a field is touched or not\n */\nfunction useIsFieldTouched(path) {\n    const fieldOrPath = resolveFieldOrPathState(path);\n    return computed(() => {\n        var _a, _b;\n        if (!fieldOrPath) {\n            return false;\n        }\n        return (_b = ('meta' in fieldOrPath ? fieldOrPath.meta.touched : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.touched)) !== null && _b !== void 0 ? _b : false;\n    });\n}\n\n/**\n * If a field is validated and is valid\n */\nfunction useIsFieldValid(path) {\n    const fieldOrPath = resolveFieldOrPathState(path);\n    return computed(() => {\n        var _a, _b;\n        if (!fieldOrPath) {\n            return false;\n        }\n        return (_b = ('meta' in fieldOrPath ? fieldOrPath.meta.valid : (_a = fieldOrPath === null || fieldOrPath === void 0 ? void 0 : fieldOrPath.value) === null || _a === void 0 ? void 0 : _a.valid)) !== null && _b !== void 0 ? _b : false;\n    });\n}\n\n/**\n * If the form is submitting or not\n */\nfunction useIsSubmitting() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form is validating or not\n */\nfunction useIsValidating() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.isValidating.value) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validates a single field\n */\nfunction useValidateField(path) {\n    const form = injectWithSelf(FormContextKey);\n    const field = path ? undefined : inject(FieldContextKey);\n    return function validateField() {\n        if (field) {\n            return field.validate();\n        }\n        if (form && path) {\n            return form === null || form === void 0 ? void 0 : form.validateField(toValue(path));\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`field with name ${unref(path)} was not found`);\n        }\n        return Promise.resolve({\n            errors: [],\n            valid: true,\n        });\n    };\n}\n\n/**\n * If the form is dirty or not\n */\nfunction useIsFormDirty() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form is touched or not\n */\nfunction useIsFormTouched() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form has been validated and is valid\n */\nfunction useIsFormValid() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validate multiple fields\n */\nfunction useValidateForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return function validateField() {\n        if (!form) {\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\n        }\n        return form.validate();\n    };\n}\n\n/**\n * The number of form's submission count\n */\nfunction useSubmitCount() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n    });\n}\n\n/**\n * Gives access to a field's current value\n */\nfunction useFieldValue(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, toValue(path));\n        }\n        return toValue(field === null || field === void 0 ? void 0 : field.value);\n    });\n}\n\n/**\n * Gives access to a form's values\n */\nfunction useFormValues() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\n    });\n}\n\n/**\n * Gives access to all form errors\n */\nfunction useFormErrors() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    return computed(() => {\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\n    });\n}\n\n/**\n * Gives access to a single field error\n */\nfunction useFieldError(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return form === null || form === void 0 ? void 0 : form.errors.value[toValue(path)];\n        }\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n    });\n}\n\nfunction useSubmitForm(cb) {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n        }\n    }\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\n    return function submitForm(e) {\n        if (!onSubmit) {\n            return;\n        }\n        return onSubmit(e);\n    };\n}\n\n/**\n * Sets a field's error message\n */\nfunction useSetFieldError(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return function setFieldError(message) {\n        if (path && form) {\n            form.setFieldError(toValue(path), message);\n            return;\n        }\n        if (field) {\n            field.setErrors(message || []);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set error message since there is no form context or a field named \"${toValue(path)}\", did you forget to call \"useField\" or \"useForm\"?`);\n        }\n    };\n}\n\n/**\n * Sets a field's touched meta state\n */\nfunction useSetFieldTouched(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return function setFieldTouched(touched) {\n        if (path && form) {\n            form.setFieldTouched(toValue(path), touched);\n            return;\n        }\n        if (field) {\n            field.setTouched(touched);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set touched state since there is no form context or a field named \"${toValue(path)}\", did you forget to call \"useField\" or \"useForm\"?`);\n        }\n    };\n}\n\n/**\n * Sets a field's value\n */\nfunction useSetFieldValue(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return function setFieldValue(value, shouldValidate = true) {\n        if (path && form) {\n            form.setFieldValue(toValue(path), value, shouldValidate);\n            return;\n        }\n        if (field) {\n            field.setValue(value, shouldValidate);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set value since there is no form context or a field named \"${toValue(path)}\", did you forget to call \"useField\" or \"useForm\"?`);\n        }\n    };\n}\n\n/**\n * Sets multiple fields errors\n */\nfunction useSetFormErrors() {\n    const form = injectWithSelf(FormContextKey);\n    function setFormErrors(fields) {\n        if (form) {\n            form.setErrors(fields);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set errors because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n        }\n    }\n    return setFormErrors;\n}\n\n/**\n * Sets multiple fields touched or all fields in the form\n */\nfunction useSetFormTouched() {\n    const form = injectWithSelf(FormContextKey);\n    function setFormTouched(fields) {\n        if (form) {\n            form.setTouched(fields);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set touched state because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n        }\n    }\n    return setFormTouched;\n}\n\n/**\n * Sets multiple fields values\n */\nfunction useSetFormValues() {\n    const form = injectWithSelf(FormContextKey);\n    function setFormValues(fields, shouldValidate = true) {\n        if (form) {\n            form.setValues(fields, shouldValidate);\n            return;\n        }\n        if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Could not set form values because a form was not detected, did you forget to use \"useForm\" in a parent component?`);\n        }\n    }\n    return setFormValues;\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, cleanupNonNestedPath, configure, defineRule, isNotNestedPath, normalizeRules, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useIsValidating, useResetForm, useSetFieldError, useSetFieldTouched, useSetFieldValue, useSetFormErrors, useSetFormTouched, useSetFormValues, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate, validateObjectSchema as validateObject };\n"],"names":["length","errors","key","_a","id","_b","validate","opts","warn$1","values"],"mappings":"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","x_google_ignoreList":[0]}